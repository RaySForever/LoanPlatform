<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <contextName>loanPlatform-service-sms</contextName>

    <!-- 文件日志的输出目录 -->
    <property name="LOG_PATH" value="D:/Logs/loanPlatform/sms" />

    <!--
        控制台日志格式
        日志输出格式：详情请见http://logback.qos.ch/manual/layouts.html#conversionWord
        %d{yyyy-MM-dd HH:mm:ss.SSS}表示格式化日期时间，其中%d可为%date，
        %line:输出执行日志请求的行号，
        %highlight：高亮
        %(color)(...)：对括号内的内容上色。magenta:洋红;boldMagenta:粗红;cyan:青色;white:白色;magenta:洋红
        %thread表示线程名，
        %-5level：级别，-5指从左显示5个字符宽度
        %method：输出执行日志请求的方法名，
        %class：输出日志打印类的全限定名，后面跟{0}表示，含义为全限定类名最右边点符号之后的字符串，
        %relative：输出从程序启动到创建日志记录的时间，单位是毫秒;
        %logger{50}：表示logger名字最长50个字符，否则按照句点分割。
        %msg：日志消息，
        %n是换行符
    -->
    <property name="CONSOLE_LOG_PATTERN"
              value="%yellow(%date{yyyy-MM-dd HH:mm:ss}) %highlight(%-5level) ${PID:-} --- [%thread] %cyan(%logger{40}) : %msg%n"/>

    <!--文件日志格式-->
    <property name="FILE_LOG_PATTERN"
              value="%date{yyyy-MM-dd HH:mm:ss} [%-5level] %thread %file:%line %logger %msg%n" />

    <!--编码-->
    <property name="ENCODING"
              value="UTF-8" />

    <!-- 控制台日志 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- 过滤器 -->
            <level>debug</level>    <!-- 允许打印debug以上级别的日志 -->
        </filter>
    </appender>

    <appender name="INFO_ROLLING_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!--  要区别于其他的appender中的文件名字  -->
        <file>${LOG_PATH}/log-info.log</file>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>


        <!-- 设置滚动日志记录的滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志归档路径以及格式 -->
            <fileNamePattern>${LOG_PATH}/info/log-info-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!--归档日志文件保留的最大数量-->
            <maxHistory>15</maxHistory>

            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>1MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- 记录比INFO级别高且包括其本身的日志记录 -->
            <level>INFO</level>
        </filter>

    </appender>

    <appender name="WARN_ROLLING_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!--  要区别于其他的appender中的文件名字  -->
        <file>${LOG_PATH}/log-warn.log</file>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>


        <!-- 设置滚动日志记录的滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志归档路径以及格式 -->
            <fileNamePattern>${LOG_PATH}/warn/log-warn-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!--归档日志文件保留的最大数量-->
            <maxHistory>15</maxHistory>

            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>128KB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- 记录比WARN级别高且包括其本身的日志记录 -->
            <level>WARN</level>
        </filter>

    </appender>

    <appender name="ERROR_ROLLING_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!--  要区别于其他的appender中的文件名字  -->
        <file>${LOG_PATH}/log-error.log</file>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>


        <!-- 设置滚动日志记录的滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志归档路径以及格式 -->
            <fileNamePattern>${LOG_PATH}/error/log-error-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!--归档日志文件保留的最大数量-->
            <maxHistory>15</maxHistory>

            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>16KB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>            <!-- 筛选error级别的日志 -->
            <onMatch>ACCEPT</onMatch>       <!-- 是这个级别的就记录 -->
            <onMismatch>DENY</onMismatch>   <!-- 不是这个级别的拒绝记录 -->
        </filter>

    </appender>

    <appender name="SPRINGFRAMEWORK" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 指定日志文件的名称 -->
        <file>${LOG_PATH}/SpringFramework.log</file>
        <append>true</append>
        <!--
        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
            滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
            %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
            <fileNamePattern>${LOG_PATH}/spring/SpringFramework-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!--
            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，
            那些为了归档而创建的目录也会被删除。
            -->
            <MaxHistory>15</MaxHistory>
            <!--
            当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>1MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 日志输出格式： -->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${ENCODING}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- 记录比DEBUG级别高且包括其本身的日志记录 -->
            <level>DEBUG</level>
        </filter>
    </appender>

    <!-- 开发环境和测试环境 -->
    <springProfile name="dev,test">
        <logger name="xyz.raysmen.lp" level="DEBUG">
            <appender-ref ref="CONSOLE" />
            <appender-ref ref="INFO_ROLLING_FILE" />
            <appender-ref ref="WARN_ROLLING_FILE" />
            <appender-ref ref="ERROR_ROLLING_FILE" />
        </logger>
        <!-- Spring framework logger -->
        <logger name="org.springframework" level="DEBUG" additivity="false">
            <appender-ref ref="CONSOLE" />
            <appender-ref ref="SPRINGFRAMEWORK" />
        </logger>
    </springProfile>

    <!-- 生产环境 -->
    <springProfile name="prod">
        <logger name="xyz.raysmen.lp" level="INFO">
            <appender-ref ref="CONSOLE" />
            <appender-ref ref="INFO_ROLLING_FILE" />
            <appender-ref ref="WARN_ROLLING_FILE" />
            <appender-ref ref="ERROR_ROLLING_FILE" />
        </logger>
        <!-- Spring framework logger -->
        <logger name="org.springframework" level="DEBUG" additivity="false">
            <appender-ref ref="SPRINGFRAMEWORK" />
        </logger>
    </springProfile>
</configuration>